# GraphQL supports two basic types of request: queries and mutations. In both
# cases, you can specify the shape of the JSON you want to get back.
#
# This solves both the overfetching and underfetching problems that traditional
# REST and RPC APIs have: in one roundtrip, you get back exactly what you need,
# no more, no less.
#
# Queries and mutations behave similarly, except: on the server queries may be
# run in parallel, while mutations run one at a time. On the client, queries
# may use a cached response, while mutations always result in a request.
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  # Returns the logged-in user making the query, or null if anonymous.
  self (email: String!): User
  self2: User

  # Returns user based on user ID, or null if no user with that user ID exists
  user (userId: Int!): User

  surveys: [Survey!]!
  survey (surveyId: Int!): Survey

  # Returns listing based on listing ID, or null if no listing with that listing ID exists
  listing (listingId: Int!): Listing

  # Returns a list of all the listings in the database
  listings: [Listing!]

  # Returns a list of all the comments in the database
  comments: [Comment!]
}

type Mutation {
  # Records an answer to a survey question presented in class.
  answerSurvey (input: SurveyInput!): Boolean!

  # Moves the survey to the next question (or starts it if it hasn't started). ADMIN only.
  nextSurveyQuestion (surveyId: Int!): Survey

  # Create a new listing in the database (either a service being offered/requested)
  addListing(listing: ListingInput): Listing

  # Create a new comment on a listing in the database
  addComment(comment: CommentInput): Comment

  # Add a tag to a listing in the database
  addTag(tag: TagInput): Tag

  # Edit an existing listing in the database
  editListing(editInfo: EditListingInput): Listing

  # Edit an existing user in the database
  editUser(editInfo: EditUserInput): User
}

type Subscription {
  surveyUpdates (surveyId: Int!): Survey
}

type User {
  id: Int!
  userType: UserType!
  email: String!
  name: String!
  password: String!
  number: String!
  location: String!
  about: String!
  # authToken
}

enum UserType { ADMIN, USER }

input EditUserInput {
  # user id
  id: Int

  # email of user
  email: String!

  # name of user
  name: String

  # user's password
  password: String

  # user's number
  number: String

  # user's location
  location: String

  # about user
  about: String
}

type Survey {
  id: Int!

  # Pretty name for the survey.
  name: String!

  # True if the survey has started.
  isStarted: Boolean!

  # True if the survey has completed.
  isCompleted: Boolean!

  # The current survey question, or null if the survey hasn't started.
  currentQuestion: SurveyQuestion

  # All the survey's questions, in presentation order.
  questions: [SurveyQuestion]!
}

type SurveyQuestion {
  id: Int!

  # The prompt, e.g. "how long have you been programming".
  prompt: String!

  # The choices available if multiple choice, null if not multiple choice.
  choices: [String!]

  # All answers received so far for the question.
  answers: [SurveyAnswer!]!

  # The Survey that this question is on.
  survey: Survey!
}

type SurveyAnswer {
  id: Int!
  answer: String!
  question: SurveyQuestion!
}

input SurveyInput {
  questionId: Int!
  answer: String!
}


type Listing {
  id: Int!

  # username of user who posted this listing
  username: String!

  # user ID of user who posted this listing
  userId_ref: Int!

  # price. Null if user is requesting a service
  price: Int

  # name of service being offered
  sellingName: String!

  startDate: String!

  endDate: String!

  location: String!

  description: String!

  # need to be URLs to images uploaded elsewhere
  image: String!

  #comments on this listing
  comments: [Comment]!

  #tags on this listing
  tags: [Tag]!
}

input ListingInput {
  # username of user who posted this listing
  username: String!

  # user ID of user who posted this listing
  userId_ref: Int!

  # price. Null if user is requesting a service
  price: Int

  # name of service being offered
  sellingName: String!

  startDate: String!

  endDate: String!

  location: String!

  description: String!

  # need to be URL to images uploaded elsewhere
  image: String!
}

input EditListingInput {
  # listing to edit
  id: Int!

  # username of user who posted this listing
  username: String

  # price. Null if user is requesting a service
  price: Int

  # name of service being offered
  sellingName: String

  startDate: String

  endDate: String

  location: String

  description: String

  # need to be URL to images uploaded elsewhere
  image: String
}

type Comment {
  # date/time this comment was posted (in string form)
  date: String!

  # contents of this comment
  commentContents: String!

  # listing this comment is on
  listing: Listing!

  # user ID associated w/this comment
  userId: Int!

  # user name associated w/this comment
  username: String!

  # user profile photo associated w/this comment
  userPic: String!
}

input CommentInput {
  # date/time this comment was posted (in string form)
  date: String!

  # contents of this comment
  commentContents: String!

  # listing ID associated w/this comment
  listingId_ref: Int!

  # user ID associated w/this comment
  userId: Int!

  # user name associated w/this comment
  username: String!

  # user profile photo associated w/this comment
  userPic: String!
}

enum TagType { GROCERIES, TUTORING, HAIRCUT, OTHER }

type Tag {
  type: TagType!
  listing: Listing!
}

input TagInput {
  type: TagType!
  listingId: Int!
}